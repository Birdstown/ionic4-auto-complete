{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/keyboard-a2b5e51d.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","KEYBOARD_THRESHOLD","previousVisualViewport","currentVisualViewport","previousLayoutViewport","currentLayoutViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","copyLayoutViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","layoutViewportDidChange","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft","innerWidth"],"mappings":"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","file":"keyboard-a2b5e51d-js.js","sourcesContent":["const KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nconst KEYBOARD_THRESHOLD = 150;\nlet previousVisualViewport = {};\nlet currentVisualViewport = {};\nlet previousLayoutViewport = {};\nlet currentLayoutViewport = {};\nlet keyboardOpen = false;\n/**\n * This is only used for tests\n */\nconst resetKeyboardAssist = () => {\n    previousVisualViewport = {};\n    currentVisualViewport = {};\n    previousLayoutViewport = {};\n    currentLayoutViewport = {};\n    keyboardOpen = false;\n};\nconst startKeyboardAssist = (win) => {\n    startNativeListeners(win);\n    if (!win.visualViewport) {\n        return;\n    }\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n    currentLayoutViewport = copyLayoutViewport(win);\n    win.visualViewport.onresize = () => {\n        trackViewportChanges(win);\n        if (keyboardDidOpen() || keyboardDidResize(win)) {\n            setKeyboardOpen(win);\n        }\n        else if (keyboardDidClose(win)) {\n            setKeyboardClose(win);\n        }\n    };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\nconst startNativeListeners = (win) => {\n    win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\n    win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\n};\nconst setKeyboardOpen = (win, ev) => {\n    fireKeyboardOpenEvent(win, ev);\n    keyboardOpen = true;\n};\nconst setKeyboardClose = (win) => {\n    fireKeyboardCloseEvent(win);\n    keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accomodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\nconst keyboardDidOpen = () => {\n    const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n    return (!keyboardOpen &&\n        previousVisualViewport.width === currentVisualViewport.width &&\n        scaledHeightDifference > KEYBOARD_THRESHOLD &&\n        !layoutViewportDidChange());\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\nconst keyboardDidResize = (win) => {\n    return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\nconst keyboardDidClose = (win) => {\n    return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Determine if the layout viewport has\n * changed since the last visual viewport change.\n * It is rare that a layout viewport change is not\n * associated with a visual viewport change so we\n * want to make sure we don't get any false positives.\n */\nconst layoutViewportDidChange = () => {\n    return (currentLayoutViewport.width !== previousLayoutViewport.width ||\n        currentLayoutViewport.height !== previousLayoutViewport.height);\n};\n/**\n * Dispatch a keyboard open event\n */\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\n    const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n    const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n        detail: { keyboardHeight }\n    });\n    win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\nconst fireKeyboardCloseEvent = (win) => {\n    const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n    win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\nconst trackViewportChanges = (win) => {\n    previousVisualViewport = Object.assign({}, currentVisualViewport);\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n    previousLayoutViewport = Object.assign({}, currentLayoutViewport);\n    currentLayoutViewport = copyLayoutViewport(win);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\nconst copyVisualViewport = (visualViewport) => {\n    return {\n        width: Math.round(visualViewport.width),\n        height: Math.round(visualViewport.height),\n        offsetTop: visualViewport.offsetTop,\n        offsetLeft: visualViewport.offsetLeft,\n        pageTop: visualViewport.pageTop,\n        pageLeft: visualViewport.pageLeft,\n        scale: visualViewport.scale\n    };\n};\n/**\n * Creates a deep copy of the layout viewport\n * at a given state\n */\nconst copyLayoutViewport = (win) => {\n    return {\n        width: win.innerWidth,\n        height: win.innerHeight\n    };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyLayoutViewport, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\n"],"sourceRoot":"webpack:///"}